<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Backends on Variation Palladion - 撕裂时间的帕拉迪昂</title>
    <link>https://elizurhz.cn/backend/</link>
    <description>Recent content in Backends on Variation Palladion - 撕裂时间的帕拉迪昂</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 18 Jul 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://elizurhz.cn/backend/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Amazon AWS Serverless 部署 React 项目</title>
      <link>https://elizurhz.cn/backend/aws-serverless-deployment/</link>
      <pubDate>Thu, 18 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://elizurhz.cn/backend/aws-serverless-deployment/</guid>
      <description>写在前面 为什么使用 Serverless 因为它是按量(请求数)付费的，相比于 EC 或者容器的按时间付费会节省很多成本，并且 EC 往往会遇到带宽限制的问题，增加带宽会提高很多成本。
Prerequisite 如果要使用 Amazon AWS Serverless 来部署 React 项目，我们需要一个叫做 serverless 的 npm package。同时我们还需要在项目下编写 serverless.yml。具体的写法可以参考 serverless 的官方文档。
CSR(create-react-app) 客户端渲染，也就是我们最常用的 create-react-app 搭出来的项目，使用 Serverless 的方式部署到 AWS 其实很简单。要让我们的部署能够运行起来，在 AWS 上我们只需要一个服务：S3。S3 有一个静态页面托管的服务，并且会自动生成一个可访问的地址。这个静态站点可以运行我们打包好的 web app。
手动部署 首先只要在 AWS S3 的控制面板里创建存储桶就可以了，配置可以都用默认配置。
其次，我们需要进入已经建好的存储桶，把静态网站托管打开。
接着我们需要注意，一定要把 error.html 指向 index.html。因为我们可能在项目中使用 react-router，而在 S3 的静态文件托管中，任何子路径都会被认为是 error，因为我们使用 create-react-app 创建的项目，入口文件只有一个 index.html，而不是有其他 html 文件的多页面应用。只有把错误页面指向 index.html，才能正常使用 react-router。
这里会显示该存储桶的访问地址，通过这个地址就可以访问了。接着我们在存储桶的“概述”标签页上传我们打包好的文件（index.html 需要在存储桶的根目录），这样我们的站点就可以访问了。
如果需要 https，我们可以在 CloudFront 上创建一个域名，把源指向我们的 S3 bucket 就可以了。这个过程无需我们申请任何的证书。
serverless 命令行部署 首先我们需要安装 serverless：运行 yarn add --global serverless(如果你安装了 yarn) 或者 npm install -g serverless。</description>
    </item>
    
    <item>
      <title>ECS 上的 git 管理工具踩坑记</title>
      <link>https://elizurhz.cn/backend/remote-private-git-first-look/</link>
      <pubDate>Sun, 24 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://elizurhz.cn/backend/remote-private-git-first-look/</guid>
      <description>ECS 上的 git 管理工具踩坑记 gitlab 在 CentOS 上安装 gitlab 参考 8 小时外实践系列(六) - 在阿里云服务器上搭建 GitLab(草稿) - CSDN 博客
 gitlab 非常吃性能，在 1 核 1G 的服务器上安装后会导致机子非常卡，同时域名/IP 访问也会出现 502，查资料之后发现是配置太低的问题。官方推荐的配置是 2 核心 8G 内存，我们普通个人用户显然难以支付这么昂贵的服务器配置，更不用说海外主机了。
 使用 docker 部署 gitlab 只需要在 docker hub 中 docker pull gitlab/gitlab-ce 就行，然后我启动容器的的代码如下：
sudo docker run --detach \ --hostname gitlab.mydomain.com \ --publish 8443:443 --publish 80:80 --publish 2222:22 \ --name gitlab \ --restart always \ --volume /srv/gitlab/config:/etc/gitlab \ --volume /srv/gitlab/logs:/var/log/gitlab \ --volume /srv/gitlab/data:/var/opt/gitlab \ gitlab/gitlab-ce  如需修改 gitlab.</description>
    </item>
    
    <item>
      <title>关于域名和备案</title>
      <link>https://elizurhz.cn/backend/domain-and-website-approve/</link>
      <pubDate>Sun, 24 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://elizurhz.cn/backend/domain-and-website-approve/</guid>
      <description>关于域名和备案 我本人主要也只做过个人备案，做博客和个人展示页面，所以不大了解企业备案，能提供的信息也有限。
域名 ICP 备案 ICP 备案可以直接在阿里云或者其他平台上提供的备案服务中进行。
所有 DNS 指向国内节点服务器的域名都需要进行 ICP 备案，如果不备案无法正常访问。如果是指向海外节点（包括港澳台），就可以不需要备案。
个人备案对网站名的要求挺严格的，不能涉及行业信息，不能带域名中的关键字等等。
个人备案有网站内容的限制，一般流量小的话是不会被发现，我是第一次完成备案后想要备案第二个域名，阿里云方面顺便告知我之前那个不行要下架整改。。。
公安备案 这个没有什么需要注意的，只需要上公安备案的网站按流程操作就可以了。</description>
    </item>
    
    <item>
      <title>前后端分离项目在阿里云/七牛云的简单部署</title>
      <link>https://elizurhz.cn/backend/c-s-ops/</link>
      <pubDate>Sun, 24 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://elizurhz.cn/backend/c-s-ops/</guid>
      <description>前后端分离项目在阿里云/七牛云的简单部署 购买主机 我购买了两台主机，都是的是 1 核 + 1GHz + 1Mbps 的配置，系统一台是为 Ubuntu 14.04，另一台是 CentOS 7.4。直连实测 700 多 KB 的 Webpack 生产打包后的 React 的 js 文件需要十多秒才能加载，速度大约 60KB/s。
启动实例 购买后实例是自动启动的，但是需要进行一些初始化的设置。
进入 ECS 的实例页面，首先如果需要从控制台远程连接，阿里云会提供一个远程连接密码，这个密码需要记住，每次从控制台远程连接时会需要。
我们正常的开发一般是从 Terminal 或者 FileZilla 等 SFTP 客户端去连接服务器，为了进行此操作，我们需要设置初始密码。控制台的实例页面点击 “更多” =&amp;gt; “密码/密钥” =&amp;gt; “重置密码” 即可重置 Linux 登录密码，也是 ssh 的密码。重置后我们就可以使用刚刚输入的密码，通过 ssh root@${yourServerIp} 登陆。如果你已经在购买的 ECS 时候设置了密码或者密钥，那可以不需要在此设置密码。
而 FileZilla 也是一样，建立一个 SFTP 连接，使用用户 root 和更改好的密码即可。
系统配置 首先我们需要把包管理器源替换成国内的源，Ubuntu 的 apt 可以使用清华的源，CentOS 的 yum 可以使用阿里云的源。
 Ubuntu  cd /etc/apt/ sudo cp sources.</description>
    </item>
    
    <item>
      <title>前后端分离项目的容器化</title>
      <link>https://elizurhz.cn/backend/docker-ops/</link>
      <pubDate>Sun, 24 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://elizurhz.cn/backend/docker-ops/</guid>
      <description>前后端分离项目的容器化 docker CentOS 7 上
yum install -y docker  基本命令 docker images # 列出当前本地所有的 docker 镜像  docker search [docker-name] # 在 docker hub 中搜索镜像  docker pull [docker-name] # 在 docker hub 中拉取镜像到本机  docker run \ # 启动镜像 -d \ # --detach -h example.com \ # --hostname，主机 -p 8443:443 -p 8888:80 -p 2222:22 \ # --publish 端口，格式：本机端口:容器端口，将容器端口映射到本机端口 --name example \ # 容器的名字 -e XXX=xxx \ # 指定环境变量 -v /your/local/path:/your/image/path \ # --volume，格式：本机路径:容器路径，挂载卷，可以使本机的目录和容器中的目录互通、同步，可以用于持久化容器数据 [docker-name] # 镜像名字，如 mysql, gitlab/gitlab-ce 等  docker ps # 查看所有已创建的镜像 docker ps -a # 查看所有运行中的镜像  docker start/stop/restart/rm [container id/container name] # 启动、停止、重启、删除某个容器，可以使用容器 id 或者容器名  容器在 docker run 之后会在 docker ps -a 的列表中，如果需要重新运行这个容器，必须先停止它再 rm。</description>
    </item>
    
    <item>
      <title>用 IntelliJ IDEA 配置 Maven Project 并使用 Tomcat 在本机运行</title>
      <link>https://elizurhz.cn/backend/maven-tomcat-idea/</link>
      <pubDate>Sun, 24 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://elizurhz.cn/backend/maven-tomcat-idea/</guid>
      <description>用 IntelliJ IDEA 配置 Maven Project 并使用 Tomcat 在本机运行 作为一个前端开发，时不时会参与维护一些老的前后端未分离的项目，而服务端渲染的老项目大多还是以 Java 为主，这样就起码需要懂得怎样配置项目，怎样起服务，否则天天需要服务端的同学帮忙岂不是很麻烦。
Java 环境 首先上官网下载 JDK，然后安装。我这里使用 1.8 的版本，因为太高版本好像不支持。
然后下载 IntelliJ IDEA。
接着打开项目。这里以 Windows 10 为例（公司内网服务只能用有线连接的台式机访问很蛋疼不能用 Mac 开发）。首先 File =&amp;gt; New =&amp;gt; Project from Existing Sources&amp;hellip;
然后选择项目并使用默认配置即可。
配置 Maven 点开右侧栏中的 Maven Projects，点击设置按钮
按如图所示选择 Maven home directory（内有相应的依赖配置）。另外在 User settings file 右侧勾选 override，然后选择 Maven home directory 中的 /conf/settings.xml 文件。然后 Apply 即可。
接着右下角会提示你是否需要 Import，选择 Import 即可。或者你可以在 Maven 面板中先双击 clean，然后再双击 install。这一步会完成 Maven 依赖的安装。
配置 Tomcat 首先找到右上角的工具栏，红框所示位置如果你没有配置 Tomcat，会显示 Add Configuration。点击这里即可。</description>
    </item>
    
  </channel>
</rss>