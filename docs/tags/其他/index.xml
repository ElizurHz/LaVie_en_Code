<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>其他 on Variation Palladion - 撕裂时间的帕拉迪昂</title>
    <link>https://elizurhz.cn/tags/%E5%85%B6%E4%BB%96/</link>
    <description>Recent content in 其他 on Variation Palladion - 撕裂时间的帕拉迪昂</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 10 Dec 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://elizurhz.cn/tags/%E5%85%B6%E4%BB%96/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Apple M1 对前端开发者有什么影响</title>
      <link>https://elizurhz.cn/tips/apple-m1-for-fe/</link>
      <pubDate>Thu, 10 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://elizurhz.cn/tips/apple-m1-for-fe/</guid>
      <description>这篇文章主要是从我最近微博动态等提取的观点整合成的一份总结，就不详细附图了，有兴趣可以关注下我的微博，在顶部导航栏的“About”中有，可能写得更详细，不过个人情绪也比较多，可能没有这篇文章来得客观。
 最近入手了 M1 Mac mini，低配加到 16G 内存，就迫不及待拿来尝试。目前从前端的角度来说，基本是正面的。
硬件上就不多说了，M1 有计算能力、内存带宽、SSD 速度、功耗、发热等方面的优势，总体体验是好于 Intel 不少的。
软件上可能有很多人担心兼容性问题。就前端来说，其实完全是可解决的问题。首先前端依赖的工具主要是 Node.js、文本编辑器（非 IDE，如 VSCode）以及 npm 生态。Node.js 是可以通过 Rosetta 2 安装及运行的，ARM 版正在研发中。VSCode 同样，不过 Insider 版本已经有 ARM 的支持了。至于 npm 这个就很不好说了，大部分包其实都是可以直接 import/require 的 js 文件，并没有环境依赖，然而还是有少部分怪异的包，比如我们非常常用的 node-sass，它在安装的时候需要根据你本机环境来编译，因为开发者尚未适配，所以无法识别当前 environment，这时你只能手动编译，需要利用 unix 的 arch 指令，加上前缀 arch -x86_64 运行 npm rebuild node-sass。
说到 arch -x86_64，它在 ARM 的 macOS 上其实可以起到一种“欺骗”的作用，让你的命令完全通过 Rosetta 2 以 Intel 的兼容模式运行。homebrew 就是很好的例子，开发者尚未兼容时可以使用它来安装。不过其实没必要滥用，只需要在遇到不适配的时候使用即可。
那么 M1 在实际开发中有什么优势呢。前端在开发中需要高性能计算的场景其实不多，除非是有特殊功能需求。比较常见的情况是跑单元测试，由于 Jest 是会占满所有 CPU 物理核心的，所以这还是可以一定程度上从前端角度来评价的。实际结果大概是，接近 800 个 case，M1 比近两年内的 Intel 的 Mac 要快上 10 秒左右，而且还能同时做别的事（Intel 机型会变卡甚至可能就卡得做不了别的事了）。</description>
    </item>
    
  </channel>
</rss>