<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tips on Variation Palladion - 撕裂时间的帕拉迪昂</title>
    <link>https://elizurhz.cn/tips/</link>
    <description>Recent content in Tips on Variation Palladion - 撕裂时间的帕拉迪昂</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 24 Mar 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://elizurhz.cn/tips/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GitHub 上 Fork 的仓库如何与原仓库同步并提交内容</title>
      <link>https://elizurhz.cn/tips/git-upstream/</link>
      <pubDate>Sun, 24 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://elizurhz.cn/tips/git-upstream/</guid>
      <description>GitHub 上 Fork 的仓库如何与原仓库同步并提交内容 我们可能有时会遇到需要向 GitHub 上的开源的项目提交代码。在 GitHub 中，由于你不是那个开源项目中有权限提交代码的人，你只能 Fork 后再发起 Pull Request。
Fork 仓库 你可以在 GitHub 网页上点击 Fork，之后你可以在你的个人主页的 Repository 中找到你 Fork 的仓库。
然后你就可以将其 clone 到本地。
Fork 的本地仓库与源仓库连接 参考：Syncing a fork - User Documentation
首先在命令行工具中输入
$ git remote -v 此时应该显示如下：
origin https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch) origin https://github.com/YOUR_USERNAME/YOUR_FORK.git (push) 因为我们没有将其连接到源仓库，所以需要用命令去连接。
$ git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git 这里的地址是源仓库的地址。接着我们再输入
$ git remote -v 这时应该能看到：
origin https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch) origin https://github.com/YOUR_USERNAME/YOUR_FORK.git (push) upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (fetch) upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (push) 这样我们就完成了与与源仓库的连接。</description>
    </item>
    
    <item>
      <title>掘金翻译计划存档</title>
      <link>https://elizurhz.cn/tips/translation/</link>
      <pubDate>Sun, 24 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://elizurhz.cn/tips/translation/</guid>
      <description>掘金翻译计划译者 from 2018.12.20
 【译】 用 React 和 Node.js 实现受保护的路由和权限验证 - 掘金 【译】 2019 年你应该要知道的 11 个 React UI 组件库 【译】 2019 年值得学习的顶级 JavaScript 框架与主题  </description>
    </item>
    
  </channel>
</rss>
